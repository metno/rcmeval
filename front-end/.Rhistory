#!/usr/bin/env Rscript
library(gcmeval)
dir <- find.file("calculate_statistics.R")
path <- dirname(dir[grepl("gcmeval",dir)])
setwd(path[1])
# If you have already downloaded GCM data, set path here:
path <- "/vol/lustre/storeA/users/kajsamp/Data/CMIP5/KNMI"
get.meta <- FALSE
get.stats <- TRUE
## Calculate statistics for CMIP5 data
# Alternatives for ref: tas: eraint, era5; pr: eraint, era5, gpcp
opt <- list(ref.tas=c("era5","eraint"), ref.pr=c("era5","eraint","gpcp"),
verbose=TRUE, it.ref=c(1981,2010), nfiles="all",
continue=TRUE, mask="coords.txt", path=path)
# Download reference data
if(get.stats) {
for (varid in c("tas","pr")) {
ref.var <- switch(varid, "tas"=opt$ref.tas, "pr"=opt$ref.pr)
for(ref in ref.var) {
if(is.logical(getReference(ref,varid))) {
if(opt$verbose) print("Download reference data")
if(ref=="eraint") {
getERA(variable=varid, verbose=opt$verbose)
} else if(ref=="era5") {
getERA5(variable=varid, python="python", verbose=opt$verbose)
} else if(ref=="eobs") {
getEOBS(variable=varid, verbose=opt$verbose)
} else if(ref=="gpcp") {
getGPCP(verbose=opt$verbose)
}
}
}
}
}
# Set add=FALSE to create new metadata file or TRUE to add to old file
add <- TRUE
for(varid in c("tas","pr")) {
for(rcp in c("rcp45","rcp85")) {
x <- getGCMs(select=1:110,varid=varid,experiment=rcp,
verbose=opt$verbose,path=opt$path)
if(get.meta) {
y <- metaextract(x,verbose=opt$verbose,add=add)
add <- TRUE # change add to TRUE so metadata is added to old file
}
}
}
# Calculate regional statistics for CMIP5
# (spatial mean, sd, corr, seasonal cycle rmse, cmpi)
if(get.stats) {
continue <- TRUE
for (varid in c("pr","tas")) {
print(paste("Calculate annual cycle statistics of",varid))
for(rcp in c("rcp85","rcp45")) {
for (it in list(opt$it.ref,c(2071,2100),c(2021,2050))) {
print(paste("period:",paste(it,collapse="-"),
"; scenario:",rcp))
if(all(it==opt$it.ref)) {
ref.var <- switch(varid, "tas"=opt$ref.tas, "pr"=opt$ref.pr)
} else {
ref.var <- NULL
}
for(ref in ref.var) {
calculate.statistics.cmip(reference=ref, period=it,
variable=varid, path.gcm=opt$path, nfiles=opt$nfiles,
continue=continue, mask=opt$mask, experiment=rcp,
verbose=opt$verbose)
continue <- TRUE
}
}
}
}
}
source('~/git/gcmeval/back-end/R/calculate.statistics.cmip.R')
it
varid
ref.var
ref
calculate.statistics.cmip(reference=ref, period=it,
variable=varid, path.gcm=opt$path, nfiles=opt$nfiles,
continue=continue, mask=opt$mask, experiment=rcp,
verbose=opt$verbose)
ref.mulc
file.exists(ref.mulc)
stats
!is.character(find.file(ref.mulc)[1])
ref.mon.file
variable
nc <- ncdf4::nc_open(file.path(ref.file))''
nc <- ncdf4::nc_open(file.path(ref.file))
ref.unit <- nc$var[[length(nc$var)]]$units
ref.unit
ncdf4::nc_close(nc)
ref.unit %in% c("m","m/day","m/dy","m day-1","m/s","m s-1")
source('~/git/gcmeval/back-end/R/calculate.statistics.cmip.R')
calculate.statistics.cmip(reference=ref, period=it,
variable=varid, path.gcm=opt$path, nfiles=opt$nfiles,
continue=continue, mask=opt$mask, experiment=rcp,
verbose=opt$verbose)
source('~/git/gcmeval/back-end/R/calculate.statistics.cmip.R')
calculate.statistics.cmip(reference=ref, period=it,
variable=varid, path.gcm=opt$path, nfiles=opt$nfiles,
continue=continue, mask=opt$mask, experiment=rcp,
verbose=opt$verbose)
gcm.file
ref.file
mask
cdo.gridcor(gcm.file,ref.file,period,mask=mask)
A <- cdo.gridcor(gcm.file,ref.file,period,mask=mask)
A
nc1 <- ncdf4::nc_open(gcm.file)
nc2 <- ncdf4::nc_open(ref.file)
unit1 <- nc1$var[[length(nc1$var)]]$units
unit2 <- nc2$var[[length(nc2$var)]]$units
unit1
unit2
f.ref
source('~/git/gcmeval/back-end/R/calculate.statistics.cmip.R')
source('~/git/gcmeval/back-end/R/calculate.statistics.cmip.R')
calculate.statistics.cmip(reference=ref, period=it,
variable=varid, path.gcm=opt$path, nfiles=opt$nfiles,
continue=continue, mask=opt$mask, experiment=rcp,
verbose=opt$verbose)
source('~/git/gcmeval/back-end/R/calculate.statistics.cmip.R')
calculate.statistics.cmip(reference=ref, period=it,
variable=varid, path.gcm=opt$path, nfiles=opt$nfiles,
continue=continue, mask=opt$mask, experiment=rcp,
verbose=opt$verbose)
units
ref.unit
variable
c.ref
c.ref <- 1
grepl("/s|s-1",units) & !grepl("/s|s-1",ref.unit)
units
ref.unit
c.ref <- c.ref/(60*60*24)
c.ref
!grepl("/s|s-1",units) & grepl("/s|s-1",ref.unit)
grepl("mm|kg m-2",units)
!grepl("mm|kg m-2",ref.unit)
grepl("mm|kg m-2",units) & !grepl("mm|kg m-2",ref.unit)
!grepl("mm|kg m-2",units) & grepl("mm|kg m-2",ref.unit)
c.ref
ref.file
cdo.command("mulc", c.ref, ref.file, "tmp.nc")
paste0(ref.unit,",",units)
cdo.command("chunit", paste0(ref.unit,",",units), "tmp.nc", "ref.nc")
gsub("kg m-2","mm",units)
source('~/git/gcmeval/back-end/R/calculate.statistics.cmip.R')
calculate.statistics.cmip(reference=ref, period=it,
variable=varid, path.gcm=opt$path, nfiles=opt$nfiles,
continue=continue, mask=opt$mask, experiment=rcp,
verbose=opt$verbose)
c.ref <- 1
grepl("/s|s-1",units) & !grepl("/s|s-1",ref.unit)
c.ref <- c.ref/(60*60*24)
units <- gsub("s-1","/s",units)
grepl("mm|kg m-2",units) & !grepl("mm|kg m-2",ref.unit)
!grepl("mm|kg m-2",units) & grepl("mm|kg m-2",ref.unit)
units <- gsub(" ","",units)
units
source('~/git/gcmeval/back-end/R/calculate.statistics.cmip.R')
calculate.statistics.cmip(reference=ref, period=it,
variable=varid, path.gcm=opt$path, nfiles=opt$nfiles,
continue=continue, mask=opt$mask, experiment=rcp,
verbose=opt$verbose)
c.ref <- 1
grepl("/s|s-1",units) & !grepl("/s|s-1",ref.unit)
c.ref <- c.ref/(60*60*24)
units <- gsub("s-1","/s",units)
units
grepl("mm|kg m-2",units)
source('~/git/gcmeval/back-end/R/calculate.statistics.cmip.R')
source('~/git/gcmeval/back-end/R/calculate.statistics.cmip.R')
source('~/git/gcmeval/back-end/R/calculate.statistics.cmip.R')
calculate.statistics.cmip(reference=ref, period=it,
variable=varid, path.gcm=opt$path, nfiles=opt$nfiles,
continue=continue, mask=opt$mask, experiment=rcp,
verbose=opt$verbose)
ref.unit
units
cdo.command("chunit", paste0(ref.unit,",",units), "tmp.nc", "ref.nc")
source('~/git/gcmeval/back-end/R/calculate.statistics.cmip.R')
source('~/git/gcmeval/back-end/R/calculate.statistics.cmip.R')
calculate.statistics.cmip(reference=ref, period=it,
variable=varid, path.gcm=opt$path, nfiles=opt$nfiles,
continue=continue, mask=opt$mask, experiment=rcp,
verbose=opt$verbose)
file.exists("ref.nc")
source('~/git/gcmeval/back-end/R/calculate.statistics.cmip.R')
calculate.statistics.cmip(reference=ref, period=it,
variable=varid, path.gcm=opt$path, nfiles=opt$nfiles,
continue=continue, mask=opt$mask, experiment=rcp,
verbose=opt$verbose)
A <- cdo.gridcor(gcm.file,ref.corr,period)
A
B <- cdo.gridcor(gcm.file,ref.corr,period,monthly=TRUE)
B
library(esd)
a <- retrieve(gcm.file)
b <- retrieve(ref.corr)
dim(a)
dim(b)
period
a <- subset(a,it=period)
b <- subset(b,it=period)
dim(a)
dim(b)
cca.ab <- CCA(a,b)
map(cca.ab)
dev.new(); map(cca.ab)
X$gcm.1$global$corr
source('~/git/gcmeval/back-end/R/calculate.statistics.cmip.R')
calculate.statistics.cmip(reference=ref, period=it,
variable=varid, path.gcm=opt$path, nfiles=opt$nfiles,
continue=continue, mask=opt$mask, experiment=rcp,
verbose=opt$verbose)
ref.corr
gcm.file
resolution
dimension
source('~/git/gcmeval/back-end/R/dimension.R')
dimension("ref.nc", dim=c("lat"))
dimension("ref.nc", dim=c("latitude"))
latdim <- dimension("ref.nc", dim=c("latitude"))
source('~/git/gcmeval/back-end/R/dimension.R')
latdim <- dimension("ref.nc", dim=c("latitude"))
source('~/git/gcmeval/back-end/R/dimension.R')
latdim <- dimension("ref.nc", dim=c("latitude"))
latdim
resolution("ref.nc", dim=c("latitude"))
source('~/git/gcmeval/back-end/R/calculate.statistics.cmip.R')
calculate.statistics.cmip(reference=ref, period=it,
variable=varid, path.gcm=opt$path, nfiles=opt$nfiles,
continue=continue, mask=opt$mask, experiment=rcp,
verbose=opt$verbose)
res.ref
res.gcm
res.ref!=res.gcm
ref.new <- gsub(".nc",paste0("_",sprintf("%.2f",res.gcm),"deg.nc"),ref.corr)
ref.new
res.gcm
res.gcm <- resolution(gcm.file, dim=c("lat","latitude"))
res.ref <- resolution(ref.corr, dim=c("lat","latitude"))
res.gcm
res.ref
res.ref<0
ref.corr
cdo.command("invertlat","",ref.corr,"ref.corr.nc")
ref.corr <- "ref.corr.nc"
res.ref <- resolution(ref.corr, dim=c("lat","latitude"))
res.ref
res.ref!=res.gcm
a <- cdo.gridcor(gcm.file,ref.corr,period)
A
a
source('~/git/gcmeval/back-end/R/calculate.statistics.cmip.R')
# Calculate regional statistics for CMIP5
# (spatial mean, sd, corr, seasonal cycle rmse, cmpi)
if(get.stats) {
continue <- TRUE
for (varid in c("pr","tas")) {
print(paste("Calculate annual cycle statistics of",varid))
for(rcp in c("rcp85","rcp45")) {
for (it in list(opt$it.ref,c(2071,2100),c(2021,2050))) {
print(paste("period:",paste(it,collapse="-"),
"; scenario:",rcp))
if(all(it==opt$it.ref)) {
ref.var <- switch(varid, "tas"=opt$ref.tas, "pr"=opt$ref.pr)
} else {
ref.var <- NULL
}
for(ref in ref.var) {
calculate.statistics.cmip(reference=ref, period=it,
variable=varid, path.gcm=opt$path, nfiles=opt$nfiles,
continue=continue, mask=opt$mask, experiment=rcp,
verbose=opt$verbose)
continue <- TRUE
}
}
}
}
}
source('~/git/gcmeval/back-end/R/calculate.statistics.cmip.R')
opt$add <- TRUE
opt$force <- TRUE
shiny::runApp('~/git/gcmeval/front-end')
runApp('~/git/gcmeval/front-end')
any(imSelected())
imSelected()
gcms <- gcms_all[imSelected()]
wr <- weightedrank_all()[imSelected()]
gcms
imSelected()
gcms <- gcms_all[imSelected()]
gcms <- gcmnamesRanks()
gcms
gcms <- gcmnamesRanks()[imSelected()]
gcms
wr <- weightedrank_all()[imSelected()]
wr
runApp('~/git/gcmeval/front-end')
runApp('~/git/gcmeval/front-end')
runApp('~/git/gcmeval/front-end')
runApp('~/git/gcmeval/front-end')
runApp('~/git/gcmeval/front-end')
padding
pad
str_pad
pad <- function(x, width=3, pad=" ", side="left") {
if(nchar(x)>=width) {
y <- x
} else {
if(side=="left") {
y <- paste0(rep(pad, width-nchar(x)), x)
} else if(side=="right") {
y <- paste0(x, rep(pad, width-nchar(x)))
} else {
n1 <- ceiling((width-nchar(x))/2)
n2 <- width - char(x) - n1
y <- paste0(rep(pad, n1), x, rep(pad, n2))
}
}
return(y)
}
pad("hello", width=10)
pad <- function(x, width=3, pad=" ", side="left") {
if(nchar(x)>=width) {
y <- x
} else {
if(side=="left") {
y <- paste(rep(pad, width-nchar(x)), x, collapse="")
} else if(side=="right") {
y <- paste(x, rep(pad, width-nchar(x)), collapse="")
} else {
n1 <- ceiling((width-nchar(x))/2)
n2 <- width - char(x) - n1
y <- paste(rep(pad, n1), x, rep(pad, n2), collapse="")
}
}
return(y)
}
pad("hello", width=10)
pad <- function(x, width=3, pad=" ", side="left") {
if(nchar(x)>=width) {
y <- x
} else {
if(side=="left") {
y <- paste0(paste(rep(pad, width-nchar(x)), collapse=""), x)
} else if(side=="right") {
y <- paste0(x, paste(rep(pad, width-nchar(x)), collapse=""))
} else {
n1 <- ceiling((width-nchar(x))/2)
n2 <- width - char(x) - n1
y <- paste0(paste(rep(pad, n1), collapse=""), x,
paste(rep(pad, n2), collapse=""))
}
}
return(y)
}
pad("jhdsf", width=14)
pad(1, width=3)
runApp('~/git/gcmeval/front-end')
wr <- sapply(wr, pad, width=3)
wr
runApp('~/git/gcmeval/front-end')
? checkboxGroupInput
runApp('~/git/gcmeval/front-end')
runApp('~/git/gcmeval/front-end')
runApp('~/git/gcmeval/front-end')
runApp('~/git/gcmeval/front-end')
